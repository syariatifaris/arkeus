package main

import (
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/facebookgo/grace/gracehttp"
	"github.com/gorilla/mux"
	"github.com/syariatifaris/arkeus/core/framework/handler"
	"github.com/syariatifaris/arkeus/core/inject"
	"github.com/syariatifaris/arkeus/core/log/tokolog"
	"[cproject_path]/app/core"
)

func main() {
	var (
		router   *mux.Router
		handlers []handler.THandler
	)

	deps := core.NewDependencies()
	inject.GetAssignedDependencies(deps, &handlers)
	inject.GetAssignedDependency(deps, &router)

	for _, h := range handlers {
		tokolog.INFO.Println("Registering", h.Name())
		h.RegisterHandlers(router)
	}

	var err error
	errChan := make(chan error)
	go func() {
		err = gracehttp.Serve(
			&http.Server{Addr: "0.0.0.0:[cport]", Handler: router},
		)
		tokolog.ERROR.Println(err)
	}()

	term := make(chan os.Signal, 1)
	signal.Notify(term, os.Interrupt, syscall.SIGTERM)
	select {

	case <-term:
		tokolog.WARN.Println("Signal terminate detected")
	case err := <-errChan:
		tokolog.ERROR.Println("Server error: ", err.Error())
	}
}

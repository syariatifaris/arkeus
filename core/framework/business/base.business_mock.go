// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package business

import (
	"context"
	"sync"
)

var (
	lockBaseBusinessModelWithContextMockGetModelCtx sync.RWMutex
	lockBaseBusinessModelWithContextMockValidate    sync.RWMutex
)

// BaseBusinessModelWithContextMock is a mock implementation of BaseBusinessModelWithContext.
//
//     func TestSomethingThatUsesBaseBusinessModelWithContext(t *testing.T) {
//
//         // make and configure a mocked BaseBusinessModelWithContext
//         mockedBaseBusinessModelWithContext := &BaseBusinessModelWithContextMock{
//             GetModelCtxFunc: func(ctx context.Context) (interface{}, error) {
// 	               panic("TODO: mock out the GetModelCtx method")
//             },
//             ValidateFunc: func(obj interface{}) error {
// 	               panic("TODO: mock out the Validate method")
//             },
//         }
//
//         // TODO: use mockedBaseBusinessModelWithContext in code that requires BaseBusinessModelWithContext
//         //       and then make assertions.
//
//     }
type BaseBusinessModelWithContextMock struct {
	// GetModelCtxFunc mocks the GetModelCtx method.
	GetModelCtxFunc func(ctx context.Context) (interface{}, error)

	// ValidateFunc mocks the Validate method.
	ValidateFunc func(obj interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// GetModelCtx holds details about calls to the GetModelCtx method.
		GetModelCtx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Obj is the obj argument value.
			Obj interface{}
		}
	}
}

// GetModelCtx calls GetModelCtxFunc.
func (mock *BaseBusinessModelWithContextMock) GetModelCtx(ctx context.Context) (interface{}, error) {
	if mock.GetModelCtxFunc == nil {
		panic("moq: BaseBusinessModelWithContextMock.GetModelCtxFunc is nil but BaseBusinessModelWithContext.GetModelCtx was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockBaseBusinessModelWithContextMockGetModelCtx.Lock()
	mock.calls.GetModelCtx = append(mock.calls.GetModelCtx, callInfo)
	lockBaseBusinessModelWithContextMockGetModelCtx.Unlock()
	return mock.GetModelCtxFunc(ctx)
}

// GetModelCtxCalls gets all the calls that were made to GetModelCtx.
// Check the length with:
//     len(mockedBaseBusinessModelWithContext.GetModelCtxCalls())
func (mock *BaseBusinessModelWithContextMock) GetModelCtxCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockBaseBusinessModelWithContextMockGetModelCtx.RLock()
	calls = mock.calls.GetModelCtx
	lockBaseBusinessModelWithContextMockGetModelCtx.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *BaseBusinessModelWithContextMock) Validate(obj interface{}) error {
	if mock.ValidateFunc == nil {
		panic("moq: BaseBusinessModelWithContextMock.ValidateFunc is nil but BaseBusinessModelWithContext.Validate was just called")
	}
	callInfo := struct {
		Obj interface{}
	}{
		Obj: obj,
	}
	lockBaseBusinessModelWithContextMockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	lockBaseBusinessModelWithContextMockValidate.Unlock()
	return mock.ValidateFunc(obj)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//     len(mockedBaseBusinessModelWithContext.ValidateCalls())
func (mock *BaseBusinessModelWithContextMock) ValidateCalls() []struct {
	Obj interface{}
} {
	var calls []struct {
		Obj interface{}
	}
	lockBaseBusinessModelWithContextMockValidate.RLock()
	calls = mock.calls.Validate
	lockBaseBusinessModelWithContextMockValidate.RUnlock()
	return calls
}
